A file manifest describes a set of files located on a volume.


1. GENERAL FORMAT

1.1. A file manifest is a text file (generally with a .rrm extension), consisting of lines. Each line is terminated by either
CR, LF or any combination thereof. The last line may be terminated by the EOF. Empty lines and lines consisting solely of
whitespace are ignored.

1.2. The manifest file uses the UTF-8 encoding. There must be no BOM at the beginning of the file.

1.3. Leading and trailing whitespace is not significant and is trimmed from each line before processing.


4. FILESPEC LIST

4.1. The filespec list consists of a number of filespec lines (one per file) surrounded by ::BEGIN / ::END metadata
entries.

4.2. Each filespec line starts and ends with | (vertical line).

4.3. Each filespec line consists of several fields, in order, separated by | (vertical line). All whitespace between
vertical lines is considered meaningful and is not removed prior to processing.

4.4. At the very minimum, a filespec consists of two fields:

        |<TYPE>|<relative_path>|
        
4.5. The currently supported types are:

        D   - directory
        F   - regular file

All other types are not currently supported. Applications should generate an error upon encountering other file types.

Files with multiple data streams are currently not supported. It is expected that they will be represented by multiple
filespecs.

4.6. The path is relative to the base path (see section 3.3). E.g., if the volume is mounted at /mnt/vol1 and the base
path is /foo/bar, the file /mnt/vol1/foo/bar/baz/qux.dat has the relative path value "baz/qux.dat".

4.7. For regular files, at least two more fields are required:

        |F|<relative_path>|<size>|<hash>|

4.8. Size is in bytes, decimal, with no sign, group separators, or leading zeros (except for 0). Sizes of at least up
to 2^48 bytes must be supported.

4.9. Hash is the MD5 hash value of the full file, written in uppercase hex digits (exactly 32 characters). One notable
exception is that hash of an empty file (that is, 0 bytes long) by definition equals to an empty string.

4.10. On regular files, an additional optional field (quick hash) is supported:

        |F|<relative_path>|<size>|<hash>|<quick_hash>|

For files that are 128K long or smaller, quick hash is equal to its hash. For files that are longer than 128K, quick
hash is the MD5 hash value of the file's first 64K followed by the file's last 64K.

4.11. The order of filespec lines is not important. However, directory entries must appear after all file and directory
entries contained therein (thus allowing for single-pass deletions).

4.12. Duplicate filenames should be avoided. The application may generate errors upon encountering duplicate filenames.

5. PATHS

The following rules are established for path / filename representations:

5.1. Paths are case-sensitive. Even on case-insensitive filesystems, paths must reflect the on-disk name.

5.2. Path separator is always / (forward slash), even on Windows.

5.3. Relative paths (in filespecs) must not start with / (forward slash).

5.4. Directory names may end or not end with / (forward slash). One will be appended if necessary.

5.5. Paths must not start with ./ or ../

5.6. Paths must not contain /./ or /../

5.7. Paths must not contain //

5.8. Paths must not contain the following characters: \ (backslash), / (forward slash), : (colon), ? (question mark),
* (asterisk), " (double quote), < (less than), > (greater than), | (vertical pipe), and any control characters (in the
0x00 - 0x1F range).
